akka {
  loglevel = INFO

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
  }

  cluster {
    seed-nodes = ["akka.tcp://DDDSystem@127.0.0.1:2551"]
    auto-down-unreachable-after = 10s
  }

  persistence {
    query.journal.leveldb {
      # Implementation class of the LevelDB ReadJournalProvider
      class = "akka.persistence.query.journal.leveldb.LeveldbReadJournalProvider"

      # Absolute path to the write journal plugin configuration entry that this
      # query journal will connect to. That must be a LeveldbJournal or SharedLeveldbJournal.
      # If undefined (or "") it will connect to the default journal as specified by the
      # akka.persistence.journal.plugin property.
      write-plugin = ""

      # The LevelDB write journal is notifying the query side as soon as things
      # are persisted, but for efficiency reasons the query side retrieves the events
      # in batches that sometimes can be delayed up to the configured `refresh-interval`.
      refresh-interval = 3s

      # How many events to fetch in one query (replay) and keep buffered until they
      # are delivered downstreams.
      max-buffer-size = 100
    }
    journal {
      plugin = "akka.persistence.journal.leveldb"
      leveldb {
        store {
          # DO NOT USE 'native = off' IN PRODUCTION !!!
          native = off
          dir = "target/journal"
        }
        event-adapters {
          aggregate-tagging = "com.example.AggregateTaggingEventAdapter"
        }
        event-adapter-bindings {
          "com.example.Event" = aggregate-tagging
        }
      }
    }
    snapshot-store.local.dir = "target/snapshots"

    view {
      auto-update-interval = 1s
    }
  }
}

# Configuration for the LeveldbReadJournal

spray.can.server {
  request-timeout = 1s
}